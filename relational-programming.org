#+title: Relational Programming
#+author: Roi Martin
#+date: <2024-06-22 Sat>
#+options: num:nil
#+html_link_home: index.html
#+html_link_up: index.html
#+html_head: <link rel="stylesheet" type="text/css" href="css/style.css" />

* Introduction

I'm at the very beginning of learning about logic, relational
programming, miniKanren, Prolog, etc.  This page contains my personal
notes as well as links to papers and talks I found interesting.  At
the end of the page there is a list of related books for those that
want to dig deeper.

If you want to subscribe to this page, use this [[https://github.com/jroimartin/wip.jroi.dev/commits/main/relational-programming.html.atom][RSS feed]].

* What is relational programming?

According to Wikipedia in relation to [[https://en.wikipedia.org/wiki/Logic_programming][logic programming]]:

#+begin_quote
The term relational programming has been used to cover a variety of
programming languages that treat functions as a special case of
relations.
#+end_quote

William E. Byrd provides a great introduction to relational
programming during his talk "[[https://youtu.be/AdKXXN5-ApQ][A New Relational Language]]" at the Houston
FPUG (Functional Programming Users Group).  I tried to summarize it
bellow these lines.

In functional programming, given the following expression in Lisp
syntax:

#+begin_example
  (+ 3 4) => 7
#+end_example

We say that ~+~ is a function that takes the numbers ~3~ and ~4~ and
returns their sum, which is ~7~.

In other words, there is the notion of:

- Function (~+~)
- Inputs (~3~ and ~4~)
- Output (~7~)

Meanwhile, in relational programming, this is expressed in terms of
relations.  Our previous example becomes the following relation:

#+begin_example
  (+o 3 4 7)
#+end_example

Which is a 4-place relation where functional programming's dichotomy
between inputs and outputs is gone.  Note that ~+o~ in relational
programming is equivalent to ~+~ in functional programming.

Relations are very flexible because, in addition to the notion of a
relation, we are going to think of in terms of algebra and algebraic
reasoning.  So, we can replace any position in a relation with a
variable.  Then, we can query the system for possible values of those
variables.

For instance,

#+begin_example
  (+o 3 4 Z) => Z = 7
#+end_example

or,

#+begin_example
  (+o 3 Y 7) => Y = 4
#+end_example

or,

#+begin_example
  (+o X Y 7) => X = 0; Y = 7
                X = 1; Y = 6
		...
#+end_example

In short, relational programming removes the idea of input vs
output.

* μKanren

μKanren is a minimalist language in the miniKanren family of
relational programming languages.

The miniKanren family of languages is detailed in the thesis
"[[https://raw.githubusercontent.com/webyrd/dissertation-single-spaced/master/thesis.pdf][Relational Programming in miniKanren: Techniques, Applications, and
Implementations]]" by William E. Byrd.

What follows is the μKanren implementation exposed on the paper
"[[http://webyrd.net/scheme-2013/papers/HemannMuKanren2013.pdf][μKanren: A Minimal Functional Core for Relational Programming]]" by
Jason Hemann and Daniel P. Friedman.  The code has been commented with
the relevant parts of the paper and is available [[file:relational-programming/ukanren.ss][here]].

#+include: "relational-programming/ukanren.ss" src scheme -n

μKanren was also shown in the talk "[[https://youtu.be/0FwIwewHC3o][Implementing a microKanren]]" that
Jason Hemann and Daniel P. Friedman gave at Code Mesh 2016.

* Dissecting the μKanren implementation

*TODO: document the rest of the internals.*

** Variables

Variables are represented as vectors:

#+begin_src scheme -n :scheme chez :exports both :results verbatim
  (load "relational-programming/ukanren.ss")
  (var 0)
#+end_src

#+RESULTS:
: #(0)

The 0-th index of the vector is the variable index.

#+begin_src scheme -n :scheme chez :exports both :results verbatim
  (load "relational-programming/ukanren.ss")
  (define x (var 0))
  (vector-ref x 0)
#+end_src

#+RESULTS:
: 0

Two variables are equal if their indices are equal.

#+begin_src scheme -n :scheme chez :exports both :results output verbatim
  (load "relational-programming/ukanren.ss")
  (define x (var 0))
  (define y (var 0))
  (define z (var 1))
  (printf "x == y => ~a == ~a => ~a" x y (var=? x y))
  (newline)
  (printf "x == z => ~a == ~a => ~a" x z (var=? x z))
#+end_src

#+RESULTS:
: x == y => #(0) == #(0) => #t
: x == z => #(0) == #(1) => #f

** Substitutions

A substitution is an association list that binds variables to concrete
values or to other variables.  A substitution can be extended using
the ~ext-s~ operator.

#+begin_src scheme -n :scheme chez :exports both :results verbatim
  (load "relational-programming/ukanren.ss")
  (define s '())
  (define s (ext-s (var 0) 'arbitrary-term s))
  (define s (ext-s (var 1) (var 0) s))
  s
#+end_src

#+RESULTS:
: ((#(1) . #(0)) (#(0) . arbitrary-term))

The ~walk~ operator searches for a variable's value in the
substitution recursively.

#+begin_src scheme -n :scheme chez :exports both :results verbatim
  (load "relational-programming/ukanren.ss")
  (define s '((#(1) . #(0)) (#(0) . arbitrary-term)))
  (walk (var 1) s)
#+end_src

#+RESULTS:
: arbitrary-term

When a variable is not bound, the variable itself is returned.

#+begin_src scheme -n :scheme chez :exports both :results verbatim
  (load "relational-programming/ukanren.ss")
  (define s '((#(1) . #(0))))
  (walk (var 1) s)
#+end_src

#+RESULTS:
: #(0)

** Goals

A goal is represented as a function that takes a state a returns a
stream.  A state is a pair of a substitution and a non-negative
integer representing a fresh variable counter.  A stream is a sequence
of states.

μKanren provides the following goal constructors: ~≡~, ~disj~ and
~conj~.

The ≡ goal constructor takes two terms as arguments and returns a goal
that succeeds if those two terms unify in the received state.  If
those two terms fail to unify in that state, the empty stream is
instead returned.

#+begin_src scheme -n :scheme chez :exports both :results verbatim
  (load "relational-programming/ukanren.ss")
  (define s/c '(() . 0))
  (define g (≡ (var 0) 5))
  (g s/c)
#+end_src

#+RESULTS:
: ((((#(0) . 5)) . 0))

Note that the goal does not increment the fresh variable counter.
That is why the ~call/fresh~ goal constructor exists.

The ~call/fresh~ goal constructor takes a unary function ~f~ whose
body is a goal, and itself returns a goal.  This returned goal, when
provided a state ~s/c~, binds the formal parameter of ~f~ to a new
logic variable, and passes a state, with the substitution it
originally received and a newly incremented fresh-variable counter to
the goal that is the body of ~f~.

#+begin_src scheme -n :scheme chez :exports both :results verbatim
  (load "relational-programming/ukanren.ss")
  (define s/c '(() . 0))
  (define f (lambda (q) (≡ q 5)))
  ((call/fresh f) s/c)
#+end_src

#+RESULTS:
: ((((#(0) . 5)) . 1))

If the two terms of ~≡~ fail to unify, the empty stream should be
returned.

#+begin_src scheme -n :scheme chez :exports both :results verbatim
  (load "relational-programming/ukanren.ss")
  (define s/c '(() . 0))
  (define f (lambda (q) (≡ 3 5)))
  ((call/fresh f) s/c)
#+end_src

#+RESULTS:
: ()

The unification of ~3~ and ~5~ fails because these terms are not
identical.  We can also verify that the unification of ~5~ and
~5~---or ~q~ and ~q~ in general---succeeds but do not extend the
stream.

#+begin_src scheme -n :scheme chez :exports both :results verbatim
  (load "relational-programming/ukanren.ss")
  (define s/c '(() . 0))
  (define f (lambda (q) (≡ 5 5)))
  ((call/fresh f) s/c)
#+end_src

#+RESULTS:
: ((() . 1))

#+begin_src scheme -n :scheme chez :exports both :results verbatim
  (load "relational-programming/ukanren.ss")
  (define s/c '(() . 0))
  (define f (lambda (q) (≡ q q)))
  ((call/fresh f) s/c)
#+end_src

#+RESULTS:
: ((() . 1))

** Unification

Unification is determined by the ~unify~ operator of the μKanren
implementation.  It is especially interesting that it is ~unify~ that
defines the terms of the language.  In this implementation terms of
the language consist of variables, objects deemed identical under
~eqv?~ and pairs of the foregoing.

To unify two terms in a substitution, both are walked in that
substitution.  If the two terms walk to the same variable, the
original substitution is returned unchanged.

#+begin_src scheme -n :scheme chez :exports both :results verbatim
  (load "relational-programming/ukanren.ss")
  (define s '((#(0) . 5) (#(1) . #(0)) (#(2) . #(0))))
  (unify (var 1) (var 2) s)
#+end_src

#+RESULTS:
: ((#(0) . 5) (#(1) . #(0)) (#(2) . #(0)))

When one of the two terms walks to a variable, the substitution is
extended, bindings the variable to which that term walks with the
value of which the other term walks.

#+begin_src scheme -n :scheme chez :exports both :results verbatim
  (load "relational-programming/ukanren.ss")
  (define s '((#(0) . 5) (#(2) . #(0))))
  (unify (var 1) (var 2) s)
#+end_src

#+RESULTS:
: ((#(1) . 5) (#(0) . 5) (#(2) . #(0)))

#+begin_src scheme -n :scheme chez :exports both :results verbatim
  (load "relational-programming/ukanren.ss")
  (define s '((#(0) . 5) (#(2) . #(0))))
  (unify (var 1) 3 s)
#+end_src

#+RESULTS:
: ((#(1) . 3) (#(0) . 5) (#(2) . #(0)))

If both terms walk to pairs, the cars and then cdrs are unifed
recursively, succeeding if unification succeeds in the one and then
the other.

#+begin_src scheme -n :scheme chez :exports both :results verbatim
  (load "relational-programming/ukanren.ss")
  (define s '())
  (unify `(,(var 0) . ,(var 1)) '(3 . 5) s)
#+end_src

#+RESULTS:
: ((#(1) . 5) (#(0) . 3))

Finally, non-variable, non-pair terms unify if they are identical
under eqv?.

#+begin_src scheme -n :scheme chez :exports both :results verbatim
  (load "relational-programming/ukanren.ss")
  (define s '((#(0) . 5)))
  (unify (var 0) 5 s)
#+end_src

#+RESULTS:
: ((#(0) . 5))

#+begin_src scheme -n :scheme chez :exports both :results verbatim
  (load "relational-programming/ukanren.ss")
  (define s '())
  (unify 5 5 s)
#+end_src

#+RESULTS:
: ()

Unification fails otherwise.

#+begin_src scheme -n :scheme chez :exports both :results verbatim
  (load "relational-programming/ukanren.ss")
  (define s '((#(0) . 5)))
  (unify (var 0) 3 s)
#+end_src

#+RESULTS:
: #f

#+begin_src scheme -n :scheme chez :exports both :results verbatim
  (load "relational-programming/ukanren.ss")
  (define s '())
  (unify 5 3 s)
#+end_src

#+RESULTS:
: #f

* μKanren in practice

*TODO: add complex examples and document them.*

#+begin_src scheme -n :scheme chez :exports both :results verbatim
  (load "relational-programming/ukanren.ss")
  (define empty-state '(() . 0))
  ((call/fresh (lambda (q) (≡ q 5))) empty-state)
#+end_src

#+RESULTS:
: ((((#(0) . 5)) . 1))

#+begin_src scheme -n :scheme chez :exports both :results verbatim
  (load "relational-programming/ukanren.ss")
  (define empty-state '(() . 0))
  (define a-and-b
    (conj
     (call/fresh (lambda (a) (≡ a 7)))
     (call/fresh (lambda (b) (disj (≡ b 5) (≡ b 6))))))
  (a-and-b empty-state)
#+end_src

#+RESULTS:
: ((((#(1) . 5) (#(0) . 7)) . 2) (((#(1) . 6) (#(0) . 7)) . 2))

* Related books

- "Introduction to Logic" by Patrick Suppes
- "The Little Lisper" by Daniel P. Friedman
- "The Little Schemer, Fourth Edition" by Daniel P. Friedman and Matthias Felleisen
- "The Reasoned Schemer, Second Edition" by Daniel P. Friedman, William E. Byrd, Oleg Kiselyov and Jason Hemann
