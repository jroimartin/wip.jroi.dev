#+title: Relational Programming
#+author: Roi Martin
#+date: <2024-06-22 Sat>
#+options: num:nil
#+html_link_home: index.html
#+html_link_up: index.html
#+html_head: <link rel="stylesheet" type="text/css" href="css/style.css" />

* Introduction

I'm at the very beginning of learning about logic, relational
programming, miniKanren, Prolog, etc.  This page contains my personal
notes as well as links to papers and talks I found interesting.  At
the end of the page there is a list of related books for those that
want to dig deeper.

If you want to subscribe to this page, use this [[https://github.com/jroimartin/wip.jroi.dev/commits/main/relational-programming.html.atom][RSS feed]].

* What is relational programming?

According to Wikipedia in relation to [[https://en.wikipedia.org/wiki/Logic_programming][logic programming]]:

#+begin_quote
The term relational programming has been used to cover a variety of
programming languages that treat functions as a special case of
relations.
#+end_quote

William E. Byrd provides a great introduction to relational
programming during his talk "[[https://youtu.be/AdKXXN5-ApQ][A New Relational Language]]" at the Houston
FPUG (Functional Programming Users Group).  I tried to summarize it
bellow these lines.

In functional programming, given the following expression in Lisp
syntax:

#+begin_example
  (+ 3 4) => 7
#+end_example

We say that ~+~ is a function that takes the numbers ~3~ and ~4~ and
returns their sum, which is ~7~.

In other words, there is the notion of:

- Function (~+~)
- Inputs (~3~ and ~4~)
- Output (~7~)

Meanwhile, in relational programming, this is expressed in terms of
relations.  Our previous example becomes the following relation:

#+begin_example
  (+o 3 4 7)
#+end_example

Which is a 4-place relation where functional programming's dichotomy
between inputs and outputs is gone.  Note that ~+o~ in relational
programming is equivalent to ~+~ in functional programming.

Relations are very flexible because, in addition to the notion of a
relation, we are going to think of in terms of algebra and algebraic
reasoning.  So, we can replace any position in a relation with a
variable.  Then, we can query the system for possible values of those
variables.

For instance,

#+begin_example
  (+o 3 4 Z) => Z = 7
#+end_example

or,

#+begin_example
  (+o 3 Y 7) => Y = 4
#+end_example

or,

#+begin_example
  (+o X Y 7) => X = 0; Y = 7
                X = 1; Y = 6
		...
#+end_example

In short, relational programming removes the idea of input vs
output.

* μKanren

μKanren is a minimalist language in the miniKanren family of
relational programming languages.

The miniKanren family of languages is detailed in the thesis
"[[https://raw.githubusercontent.com/webyrd/dissertation-single-spaced/master/thesis.pdf][Relational Programming in miniKanren: Techniques, Applications, and
Implementations]]" by William E. Byrd.

What follows is the μKanren implementation exposed on the paper
"[[http://webyrd.net/scheme-2013/papers/HemannMuKanren2013.pdf][μKanren: A Minimal Functional Core for Relational Programming]]" by
Jason Hemann and Daniel P. Friedman.  The code has been commented with
the relevant parts of the paper and is available [[file:relational-programming/ukanren.ss][here]].

#+include: "relational-programming/ukanren.ss" src scheme -n

μKanren was also shown in the talk "[[https://youtu.be/0FwIwewHC3o][Implementing a microKanren]]" that
Jason Hemann and Daniel P. Friedman gave at Code Mesh 2016.

* Playing with μKanren

#+begin_src scheme -n :scheme chez :exports both
  (load "relational-programming/ukanren.ss")
  (define empty-state '(() . 0))
  ((call/fresh (lambda (q) (≡ q 5))) empty-state)
#+end_src

#+RESULTS:
: '((((#(0) . 5)) . 1))

#+begin_src scheme -n :scheme chez :exports both
  (load "relational-programming/ukanren.ss")
  (define empty-state '(() . 0))
  (define a-and-b
    (conj
     (call/fresh (lambda (a) (≡ a 7)))
     (call/fresh (lambda (b) (disj (≡ b 5) (≡ b 6))))))
  (a-and-b empty-state)
#+end_src

#+RESULTS:
: '((((#(1) . 5) (#(0) . 7)) . 2) (((#(1) . 6) (#(0) . 7)) . 2))

* Related books

- "Introduction to Logic" by Patrick Suppes
- "The Little Lisper" by Daniel P. Friedman
- "The Little Schemer, Fourth Edition" by Daniel P. Friedman and Matthias Felleisen
- "The Reasoned Schemer, Second Edition" by Daniel P. Friedman, William E. Byrd, Oleg Kiselyov and Jason Hemann
